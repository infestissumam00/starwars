{"ast":null,"code":"import axiosInstance from 'core/Axios';\nimport { storeConstants, URLS } from 'library/common/constants';\nexport const fetchPlanets = () => dispatch => {\n  return axiosInstance.get(URLS.planets).then(({\n    status,\n    data\n  }) => {\n    if (status === 200) {\n      let dataForStore = [];\n      data.results.map(item => {\n        let dataForStoreItem = {};\n        dataForStoreItem.name = item.name;\n        dataForStoreItem.diameter = item.diameter;\n        dataForStoreItem.rotationPeriod = item.rotation_period;\n        dataForStoreItem.orbitalPeriod = item.orbital_period;\n        dataForStoreItem.gravity = item.gravity;\n        dataForStoreItem.population = item.population;\n        dataForStoreItem.terrain = item.terrain;\n        dataForStoreItem.surfaceWater = item.surface_water;\n        dataForStoreItem.climate = item.climate;\n        dataForStore.push(dataForStoreItem);\n      });\n      dispatch({\n        type: storeConstants.FETCH_PLANETS,\n        payload: dataForStore\n      });\n    }\n  }).catch(() => {\n    dispatch({\n      type: storeConstants.FETCH_PLANETS,\n      payload: []\n    });\n  });\n};","map":{"version":3,"sources":["/Users/dhawal/WebstormProjects/starwars/src/modules/Planets/planetsAction.js"],"names":["axiosInstance","storeConstants","URLS","fetchPlanets","dispatch","get","planets","then","status","data","dataForStore","results","map","item","dataForStoreItem","name","diameter","rotationPeriod","rotation_period","orbitalPeriod","orbital_period","gravity","population","terrain","surfaceWater","surface_water","climate","push","type","FETCH_PLANETS","payload","catch"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,0BAArC;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAMC,QAAQ,IAAI;AAC1C,SAAOJ,aAAa,CACfK,GADE,CACEH,IAAI,CAACI,OADP,EAEFC,IAFE,CAEG,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,KAAsB;AACxB,QAAID,MAAM,KAAK,GAAf,EAAoB;AAChB,UAAIE,YAAY,GAAG,EAAnB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,IAAD,IAAU;AACvB,YAAIC,gBAAgB,GAAG,EAAvB;AACAA,QAAAA,gBAAgB,CAACC,IAAjB,GAAwBF,IAAI,CAACE,IAA7B;AACAD,QAAAA,gBAAgB,CAACE,QAAjB,GAA4BH,IAAI,CAACG,QAAjC;AACAF,QAAAA,gBAAgB,CAACG,cAAjB,GAAkCJ,IAAI,CAACK,eAAvC;AACAJ,QAAAA,gBAAgB,CAACK,aAAjB,GAAiCN,IAAI,CAACO,cAAtC;AACAN,QAAAA,gBAAgB,CAACO,OAAjB,GAA2BR,IAAI,CAACQ,OAAhC;AACAP,QAAAA,gBAAgB,CAACQ,UAAjB,GAA8BT,IAAI,CAACS,UAAnC;AACAR,QAAAA,gBAAgB,CAACS,OAAjB,GAA0BV,IAAI,CAACU,OAA/B;AACAT,QAAAA,gBAAgB,CAACU,YAAjB,GAAgCX,IAAI,CAACY,aAArC;AACAX,QAAAA,gBAAgB,CAACY,OAAjB,GAA2Bb,IAAI,CAACa,OAAhC;AACAhB,QAAAA,YAAY,CAACiB,IAAb,CAAkBb,gBAAlB;AACH,OAZD;AAaAV,MAAAA,QAAQ,CAAC;AACLwB,QAAAA,IAAI,EAAE3B,cAAc,CAAC4B,aADhB;AAELC,QAAAA,OAAO,EAAEpB;AAFJ,OAAD,CAAR;AAIH;AACJ,GAvBE,EAwBFqB,KAxBE,CAwBI,MAAM;AACT3B,IAAAA,QAAQ,CAAC;AACLwB,MAAAA,IAAI,EAAE3B,cAAc,CAAC4B,aADhB;AAELC,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GA7BE,CAAP;AA8BH,CA/BM","sourcesContent":["import axiosInstance from 'core/Axios';\nimport { storeConstants, URLS } from 'library/common/constants';\n\nexport const fetchPlanets = () => dispatch => {\n    return axiosInstance\n        .get(URLS.planets)\n        .then(({ status, data }) => {\n            if (status === 200) {\n                let dataForStore = [];\n                data.results.map((item) => {\n                    let dataForStoreItem = {};\n                    dataForStoreItem.name = item.name;\n                    dataForStoreItem.diameter = item.diameter;\n                    dataForStoreItem.rotationPeriod = item.rotation_period;\n                    dataForStoreItem.orbitalPeriod = item.orbital_period;\n                    dataForStoreItem.gravity = item.gravity;\n                    dataForStoreItem.population = item.population;\n                    dataForStoreItem.terrain= item.terrain;\n                    dataForStoreItem.surfaceWater = item.surface_water;\n                    dataForStoreItem.climate = item.climate;\n                    dataForStore.push(dataForStoreItem);\n                });\n                dispatch({\n                    type: storeConstants.FETCH_PLANETS,\n                    payload: dataForStore,\n                });\n            }\n        })\n        .catch(() => {\n            dispatch({\n                type: storeConstants.FETCH_PLANETS,\n                payload: [],\n            });\n        });\n};\n"]},"metadata":{},"sourceType":"module"}