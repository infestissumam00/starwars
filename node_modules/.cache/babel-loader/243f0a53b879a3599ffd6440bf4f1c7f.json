{"ast":null,"code":"var _jsxFileName = \"/Users/dhawal/WebstormProjects/starwars/src/library/common/components/ErrorBoundary/index.js\";\nimport React, { Component } from 'react';\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch() {// You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n    // console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Something went wrong.\");\n    }\n\n    return this.props.children;\n  }\n\n}","map":{"version":3,"sources":["/Users/dhawal/WebstormProjects/starwars/src/library/common/components/ErrorBoundary/index.js"],"names":["React","Component","ErrorBoundary","constructor","props","state","hasError","getDerivedStateFromError","componentDidCatch","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AACnDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AACD;;AAED,SAAOC,wBAAP,GAAkC;AAChC;AACA,WAAO;AAAED,MAAAA,QAAQ,EAAE;AAAZ,KAAP;AACD;;AAEDE,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKJ,KAAL,CAAWC,QAAf,EAAyB;AACvB;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;;AAED,WAAO,KAAKF,KAAL,CAAWM,QAAlB;AACD;;AAxBkD","sourcesContent":["import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch() {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n    // console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}