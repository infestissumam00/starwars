{"ast":null,"code":"import Axios from 'axios/index';\nimport { errorHandler, fetchFromStorage } from 'library/utilities';\nimport { identifiers } from 'library/common/constants/IdentifierConstants';\nconst axiosInstance = Axios.create({\n  baseURL: 'https://swapi.co/api/',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(config => {\n  const token = fetchFromStorage(identifiers.token);\n  const clonedConfig = config;\n\n  if (token) {\n    clonedConfig.headers.common = {\n      Authorization: `Bearer ${token.access_token}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  return clonedConfig;\n});\naxiosInstance.interceptors.response.use(config => {\n  return config;\n}, error => {\n  errorHandler(error);\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/Users/dhawal/WebstormProjects/starwars/src/core/Axios/index.js"],"names":["Axios","errorHandler","fetchFromStorage","identifiers","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","clonedConfig","common","Authorization","access_token","response","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAEA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,mBAA/C;AACA,SAASC,WAAT,QAA4B,8CAA5B;AAEA,MAAMC,aAAa,GAAGJ,KAAK,CAACK,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAE,uBADwB;AAEjCC,EAAAA,OAAO,EAAE;AAAE,oBAAgB;AAAlB;AAFwB,CAAb,CAAtB;AAKAH,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuCC,MAAM,IAAI;AAC/C,QAAMC,KAAK,GAAGV,gBAAgB,CAACC,WAAW,CAACS,KAAb,CAA9B;AACA,QAAMC,YAAY,GAAGF,MAArB;;AAEA,MAAIC,KAAJ,EAAW;AACTC,IAAAA,YAAY,CAACN,OAAb,CAAqBO,MAArB,GAA8B;AAC5BC,MAAAA,aAAa,EAAG,UAASH,KAAK,CAACI,YAAa,EADhB;AAE5B,sBAAgB;AAFY,KAA9B;AAID;;AAED,SAAOH,YAAP;AACD,CAZD;AAcAT,aAAa,CAACI,YAAd,CAA2BS,QAA3B,CAAoCP,GAApC,CACEC,MAAM,IAAI;AACR,SAAOA,MAAP;AACD,CAHH,EAIEO,KAAK,IAAI;AACPjB,EAAAA,YAAY,CAACiB,KAAD,CAAZ;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAPH;AAUA,eAAed,aAAf","sourcesContent":["import Axios from 'axios/index';\n\nimport { errorHandler, fetchFromStorage } from 'library/utilities';\nimport { identifiers } from 'library/common/constants/IdentifierConstants';\n\nconst axiosInstance = Axios.create({\n  baseURL: 'https://swapi.co/api/',\n  headers: { 'Content-Type': 'application/json' },\n});\n\naxiosInstance.interceptors.request.use(config => {\n  const token = fetchFromStorage(identifiers.token);\n  const clonedConfig = config;\n\n  if (token) {\n    clonedConfig.headers.common = {\n      Authorization: `Bearer ${token.access_token}`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  return clonedConfig;\n});\n\naxiosInstance.interceptors.response.use(\n  config => {\n    return config;\n  },\n  error => {\n    errorHandler(error);\n    return Promise.reject(error);\n  },\n);\n\nexport default axiosInstance;\n"]},"metadata":{},"sourceType":"module"}