{"ast":null,"code":"var _jsxFileName = \"/Users/dhawal/WebstormProjects/starwars/src/library/common/components/Form/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { cloneDeep } from 'lodash';\nimport { Dropdown, InputField, DateInput } from '../index';\nexport default class Form extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formData: {},\n      isFormValid: false\n    };\n\n    this.handleChange = (value, field, error) => {\n      const formData = cloneDeep(this.state.formData);\n      formData[field] = value;\n      formData[field + 'Error'] = error && error.error;\n      this.setState({\n        formData,\n        isFormValid: this.validateForm(formData)\n      });\n    };\n\n    this.validateForm = formData => {\n      const {\n        model\n      } = this.props;\n      let isFormValid = true;\n      model.forEach(item => {\n        if (item.required) {\n          isFormValid = isFormValid && !formData[item.field + 'Error'];\n        }\n      });\n      return isFormValid;\n    };\n\n    this.getFormData = () => {\n      const {\n        formData,\n        isFormValid\n      } = this.state;\n      return {\n        formData,\n        isFormValid\n      };\n    };\n\n    this.resetForm = () => {\n      this.prepareFormData();\n    };\n  }\n\n  componentDidMount() {\n    this.prepareFormData();\n  }\n\n  prepareFormData() {\n    const {\n      model,\n      values\n    } = this.props;\n    const formData = {};\n    model.forEach(item => {\n      formData[item.field] = values && values[item.field] ? values[item.field] : '';\n      formData[item.field + 'Error'] = item.required;\n    });\n    this.setState({\n      formData,\n      isFormValid: this.validateForm(formData)\n    });\n  }\n\n  renderFormFields() {\n    const {\n      model,\n      dropdownData\n    } = this.props;\n    const {\n      formData\n    } = this.state;\n    const arrayOfFields = [];\n    model.forEach((item, key) => {\n      switch (item.type) {\n        case 'text':\n        case 'email':\n        case 'number':\n        case 'password':\n        case 'textarea':\n          arrayOfFields.push(React.createElement(\"div\", {\n            key: key,\n            className: 'form-group ' + item.styleClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, React.createElement(InputField, {\n            field: item.field,\n            inputValue: formData[item.field] ? formData[item.field] : '',\n            type: item.type,\n            label: item.label,\n            testId: item.testId,\n            placeholder: item.placeholder,\n            validators: item.validators,\n            onChange: this.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          })));\n          break;\n\n        case 'dropdown':\n          arrayOfFields.push(React.createElement(\"div\", {\n            key: key,\n            className: 'form-group ' + item.styleClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, React.createElement(Dropdown, {\n            onChange: this.handleChange,\n            options: dropdownData && dropdownData[item.field],\n            label: item.label,\n            testId: item.testId,\n            placeholder: item.placeholder,\n            validators: item.validators,\n            field: item.field,\n            value: formData[item.field] ? formData[item.field] : '',\n            isMulti: item.isMulti,\n            isSearchable: item.isSearchable,\n            isDisabled: item.isDisabled,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          })));\n          break;\n\n        case 'date':\n          arrayOfFields.push(React.createElement(\"div\", {\n            key: key,\n            className: 'form-group ' + item.styleClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          }, React.createElement(DateInput, {\n            label: item.label,\n            testId: item.testId,\n            validators: item.validators,\n            field: item.field,\n            value: formData[item.field] ? formData[item.field] : '',\n            disabled: item.disabled,\n            onChange: this.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          })));\n          break;\n\n        default:\n          break;\n      }\n    });\n    return arrayOfFields;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"form-container\",\n      \"data-test\": this.props.testId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.renderFormFields()));\n  }\n\n}\nForm.defaultProps = {\n  values: {},\n  testId: '',\n  dropdownData: {}\n};\nForm.propTypes = {\n  model: PropTypes.array.isRequired,\n  values: PropTypes.object,\n  testId: PropTypes.string,\n  dropdownData: PropTypes.object\n};","map":{"version":3,"sources":["/Users/dhawal/WebstormProjects/starwars/src/library/common/components/Form/index.js"],"names":["React","Component","PropTypes","cloneDeep","Dropdown","InputField","DateInput","Form","state","formData","isFormValid","handleChange","value","field","error","setState","validateForm","model","props","forEach","item","required","getFormData","resetForm","prepareFormData","componentDidMount","values","renderFormFields","dropdownData","arrayOfFields","key","type","push","styleClass","label","testId","placeholder","validators","isMulti","isSearchable","isDisabled","disabled","render","defaultProps","propTypes","array","isRequired","object","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { cloneDeep } from 'lodash';\n\nimport { Dropdown, InputField, DateInput } from '../index';\n\nexport default class Form extends Component {\n  state = {\n    formData: {},\n    isFormValid: false,\n  };\n\n  componentDidMount() {\n    this.prepareFormData();\n  }\n\n  handleChange = (value, field, error) => {\n    const formData = cloneDeep(this.state.formData);\n    formData[field] = value;\n    formData[field + 'Error'] = error && error.error;\n    this.setState({\n      formData,\n      isFormValid: this.validateForm(formData),\n    });\n  };\n\n  validateForm = formData => {\n    const { model } = this.props;\n    let isFormValid = true;\n    model.forEach(item => {\n      if (item.required) {\n        isFormValid = isFormValid && !formData[item.field + 'Error'];\n      }\n    });\n    return isFormValid;\n  };\n\n  getFormData = () => {\n    const { formData, isFormValid } = this.state;\n    return { formData, isFormValid };\n  };\n\n  resetForm = () => {\n    this.prepareFormData();\n  };\n\n  prepareFormData() {\n    const { model, values } = this.props;\n    const formData = {};\n\n    model.forEach(item => {\n      formData[item.field] = values && values[item.field] ? values[item.field] : '';\n      formData[item.field + 'Error'] = item.required;\n    });\n\n    this.setState({ formData, isFormValid: this.validateForm(formData) });\n  }\n\n  renderFormFields() {\n    const { model, dropdownData } = this.props;\n    const { formData } = this.state;\n    const arrayOfFields = [];\n\n    model.forEach((item, key) => {\n      switch (item.type) {\n        case 'text':\n        case 'email':\n        case 'number':\n        case 'password':\n        case 'textarea':\n          arrayOfFields.push(\n            <div key={key} className={'form-group ' + item.styleClass}>\n              <InputField\n                field={item.field}\n                inputValue={formData[item.field] ? formData[item.field] : ''}\n                type={item.type}\n                label={item.label}\n                testId={item.testId}\n                placeholder={item.placeholder}\n                validators={item.validators}\n                onChange={this.handleChange}\n              />\n            </div>,\n          );\n          break;\n        case 'dropdown':\n          arrayOfFields.push(\n            <div key={key} className={'form-group ' + item.styleClass}>\n              <Dropdown\n                onChange={this.handleChange}\n                options={dropdownData && dropdownData[item.field]}\n                label={item.label}\n                testId={item.testId}\n                placeholder={item.placeholder}\n                validators={item.validators}\n                field={item.field}\n                value={formData[item.field] ? formData[item.field] : ''}\n                isMulti={item.isMulti}\n                isSearchable={item.isSearchable}\n                isDisabled={item.isDisabled}\n              />\n            </div>,\n          );\n          break;\n        case 'date':\n          arrayOfFields.push(\n            <div key={key} className={'form-group ' + item.styleClass}>\n              <DateInput\n                label={item.label}\n                testId={item.testId}\n                validators={item.validators}\n                field={item.field}\n                value={formData[item.field] ? formData[item.field] : ''}\n                disabled={item.disabled}\n                onChange={this.handleChange}\n              />\n            </div>,\n          );\n          break;\n        default:\n          break;\n      }\n    });\n\n    return arrayOfFields;\n  }\n\n  render() {\n    return (\n      <div className=\"form-container\" data-test={this.props.testId}>\n        <div className=\"row\">{this.renderFormFields()}</div>\n      </div>\n    );\n  }\n}\n\nForm.defaultProps = {\n  values: {},\n  testId: '',\n  dropdownData: {},\n};\n\nForm.propTypes = {\n  model: PropTypes.array.isRequired,\n  values: PropTypes.object,\n  testId: PropTypes.string,\n  dropdownData: PropTypes.object,\n};\n"]},"metadata":{},"sourceType":"module"}