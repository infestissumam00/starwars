{"ast":null,"code":"const regex = {\n  email: new RegExp('^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+)*)|(.+))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$'),\n  url: new RegExp('^http(s?):\\\\/\\\\/\\\\S+(\\\\/\\\\S+)*(\\\\/)?$'),\n  price: new RegExp(/^\\d+(\\.\\d{1,2})?$/),\n  number: new RegExp('^[0-9]+$')\n};\nexport class Validators {\n  static email(value, message) {\n    if (value) {\n      const result = regex.email.test(value);\n      if (!result) return {\n        error: true,\n        message\n      };\n    } // return false;\n\n  }\n\n  static required(value, message) {\n    if (!value || !value.toString().trim().length) {\n      return {\n        error: true,\n        message\n      };\n    }\n\n    return false;\n  }\n\n  static number(value, message) {\n    const length = value ? value.toString().length : 0;\n\n    if (length > 0) {\n      const result = regex.number.test(value);\n\n      if (!result) {\n        return {\n          error: true,\n          message\n        };\n      }\n    }\n\n    return false;\n  }\n\n  static price(value, message) {\n    const length = value ? value.toString().length : 0;\n\n    if (length > 0) {\n      const result = regex.price.test(value);\n\n      if (!result) {\n        return {\n          error: true,\n          message\n        };\n      }\n    }\n\n    return false;\n  }\n\n}\nexport const validateInput = (validators, value) => {\n  if (validators && validators.length) {\n    for (let i = 0; i < validators.length; i++) {\n      const error = validators[i].check(value, validators[i].message);\n\n      if (error) {\n        return error;\n      }\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/dhawal/starwars/src/library/utilities/Validators.js"],"names":["regex","email","RegExp","url","price","number","Validators","value","message","result","test","error","required","toString","trim","length","validateInput","validators","i","check"],"mappings":"AAAA,MAAMA,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,IAAIC,MAAJ,CACL,qKADK,CADK;AAIZC,EAAAA,GAAG,EAAE,IAAID,MAAJ,CAAW,uCAAX,CAJO;AAKZE,EAAAA,KAAK,EAAE,IAAIF,MAAJ,CAAW,mBAAX,CALK;AAMZG,EAAAA,MAAM,EAAE,IAAIH,MAAJ,CAAW,UAAX;AANI,CAAd;AASA,OAAO,MAAMI,UAAN,CAAiB;AACtB,SAAOL,KAAP,CAAaM,KAAb,EAAoBC,OAApB,EAA6B;AAC3B,QAAID,KAAJ,EAAW;AACT,YAAME,MAAM,GAAGT,KAAK,CAACC,KAAN,CAAYS,IAAZ,CAAiBH,KAAjB,CAAf;AACA,UAAI,CAACE,MAAL,EAAa,OAAO;AAAEE,QAAAA,KAAK,EAAE,IAAT;AAAeH,QAAAA;AAAf,OAAP;AACd,KAJ0B,CAK3B;;AACD;;AAED,SAAOI,QAAP,CAAgBL,KAAhB,EAAuBC,OAAvB,EAAgC;AAC9B,QAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACM,QAAN,GAAiBC,IAAjB,GAAwBC,MAAvC,EAA+C;AAC7C,aAAO;AAAEJ,QAAAA,KAAK,EAAE,IAAT;AAAeH,QAAAA;AAAf,OAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED,SAAOH,MAAP,CAAcE,KAAd,EAAqBC,OAArB,EAA8B;AAC5B,UAAMO,MAAM,GAAGR,KAAK,GAAGA,KAAK,CAACM,QAAN,GAAiBE,MAApB,GAA6B,CAAjD;;AAEA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,YAAMN,MAAM,GAAGT,KAAK,CAACK,MAAN,CAAaK,IAAb,CAAkBH,KAAlB,CAAf;;AACA,UAAI,CAACE,MAAL,EAAa;AACX,eAAO;AAAEE,UAAAA,KAAK,EAAE,IAAT;AAAeH,UAAAA;AAAf,SAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;;AAED,SAAOJ,KAAP,CAAaG,KAAb,EAAoBC,OAApB,EAA6B;AAC3B,UAAMO,MAAM,GAAGR,KAAK,GAAGA,KAAK,CAACM,QAAN,GAAiBE,MAApB,GAA6B,CAAjD;;AAEA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,YAAMN,MAAM,GAAGT,KAAK,CAACI,KAAN,CAAYM,IAAZ,CAAiBH,KAAjB,CAAf;;AACA,UAAI,CAACE,MAAL,EAAa;AACX,eAAO;AAAEE,UAAAA,KAAK,EAAE,IAAT;AAAeH,UAAAA;AAAf,SAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;;AAxCqB;AA2CxB,OAAO,MAAMQ,aAAa,GAAG,CAACC,UAAD,EAAaV,KAAb,KAAuB;AAClD,MAAIU,UAAU,IAAIA,UAAU,CAACF,MAA7B,EAAqC;AACnC,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACF,MAA/B,EAAuCG,CAAC,EAAxC,EAA4C;AAC1C,YAAMP,KAAK,GAAGM,UAAU,CAACC,CAAD,CAAV,CAAcC,KAAd,CAAoBZ,KAApB,EAA2BU,UAAU,CAACC,CAAD,CAAV,CAAcV,OAAzC,CAAd;;AACA,UAAIG,KAAJ,EAAW;AACT,eAAOA,KAAP;AACD;AACF;AACF;;AACD,SAAO,KAAP;AACD,CAVM","sourcesContent":["const regex = {\n  email: new RegExp(\n    '^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+)*)|(.+))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$',\n  ),\n  url: new RegExp('^http(s?):\\\\/\\\\/\\\\S+(\\\\/\\\\S+)*(\\\\/)?$'),\n  price: new RegExp(/^\\d+(\\.\\d{1,2})?$/),\n  number: new RegExp('^[0-9]+$'),\n};\n\nexport class Validators {\n  static email(value, message) {\n    if (value) {\n      const result = regex.email.test(value);\n      if (!result) return { error: true, message };\n    }\n    // return false;\n  }\n\n  static required(value, message) {\n    if (!value || !value.toString().trim().length) {\n      return { error: true, message };\n    }\n    return false;\n  }\n\n  static number(value, message) {\n    const length = value ? value.toString().length : 0;\n\n    if (length > 0) {\n      const result = regex.number.test(value);\n      if (!result) {\n        return { error: true, message };\n      }\n    }\n\n    return false;\n  }\n\n  static price(value, message) {\n    const length = value ? value.toString().length : 0;\n\n    if (length > 0) {\n      const result = regex.price.test(value);\n      if (!result) {\n        return { error: true, message };\n      }\n    }\n\n    return false;\n  }\n}\n\nexport const validateInput = (validators, value) => {\n  if (validators && validators.length) {\n    for (let i = 0; i < validators.length; i++) {\n      const error = validators[i].check(value, validators[i].message);\n      if (error) {\n        return error;\n      }\n    }\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}