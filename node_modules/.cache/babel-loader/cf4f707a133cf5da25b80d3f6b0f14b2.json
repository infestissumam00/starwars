{"ast":null,"code":"/**\n * This function will create data with supported format for react-select dropdown.\n * @param data - array of data\n * @param keys - e.g: ['id', 'name'] which can be used to create format for dropdown\n * @returns {[]}\n */\nexport const createDropdownData = (data = [], keys = []) => {\n  const createdArray = [];\n\n  if (data && data.length) {\n    data.forEach(item => {\n      createdArray.push({\n        value: item[keys[0]],\n        label: item[keys[1]]\n      });\n    });\n  }\n\n  return createdArray;\n};\n/**\n * This function will extract `value` from selected multiple dropdown. This will only used when Dropdown component has isMulti: true\n * @param values - selected values from dropdown\n * @returns {[]}\n */\n\nexport const fetchIdsFromSelectedDropdownValues = (values = []) => {\n  const extractedValue = [];\n\n  if (values && values.length) {\n    values.forEach(item => {\n      extractedValue.push(item.value);\n    });\n  }\n\n  return extractedValue;\n};\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR'\n  }).format(amount);\n};\nexport const removeErrorFieldsFromValues = formData => {\n  const fields = {};\n\n  for (const key in formData) {\n    if (!key.includes('Error')) {\n      fields[key] = formData[key];\n    }\n  }\n\n  return fields;\n};\nexport const fetchErrorFields = (formData, formModel) => {\n  const fields = [];\n\n  for (const key in formData) {\n    if (key.includes('Error') && formData[key]) {\n      formModel.forEach(form => {\n        if (form.field === key.replace('Error', '')) {\n          fields.push(form.label);\n        }\n      });\n    }\n  }\n\n  return fields;\n};","map":{"version":3,"sources":["/Users/dhawal/starwars/src/library/utilities/HelperFunctions.js"],"names":["createDropdownData","data","keys","createdArray","length","forEach","item","push","value","label","fetchIdsFromSelectedDropdownValues","values","extractedValue","formatCurrency","amount","Intl","NumberFormat","style","currency","format","removeErrorFieldsFromValues","formData","fields","key","includes","fetchErrorFields","formModel","form","field","replace"],"mappings":"AAAA;;;;;;AAMA,OAAO,MAAMA,kBAAkB,GAAG,CAACC,IAAI,GAAG,EAAR,EAAYC,IAAI,GAAG,EAAnB,KAA0B;AAC1D,QAAMC,YAAY,GAAG,EAArB;;AACA,MAAIF,IAAI,IAAIA,IAAI,CAACG,MAAjB,EAAyB;AACvBH,IAAAA,IAAI,CAACI,OAAL,CAAaC,IAAI,IAAI;AACnBH,MAAAA,YAAY,CAACI,IAAb,CAAkB;AAChBC,QAAAA,KAAK,EAAEF,IAAI,CAACJ,IAAI,CAAC,CAAD,CAAL,CADK;AAEhBO,QAAAA,KAAK,EAAEH,IAAI,CAACJ,IAAI,CAAC,CAAD,CAAL;AAFK,OAAlB;AAID,KALD;AAMD;;AACD,SAAOC,YAAP;AACD,CAXM;AAaP;;;;;;AAKA,OAAO,MAAMO,kCAAkC,GAAG,CAACC,MAAM,GAAG,EAAV,KAAiB;AACjE,QAAMC,cAAc,GAAG,EAAvB;;AACA,MAAID,MAAM,IAAIA,MAAM,CAACP,MAArB,EAA6B;AAC3BO,IAAAA,MAAM,CAACN,OAAP,CAAeC,IAAI,IAAI;AACrBM,MAAAA,cAAc,CAACL,IAAf,CAAoBD,IAAI,CAACE,KAAzB;AACD,KAFD;AAGD;;AACD,SAAOI,cAAP;AACD,CARM;AAUP,OAAO,MAAMC,cAAc,GAAGC,MAAM,IAAI;AACtC,SAAO,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,IAAAA,KAAK,EAAE,UAAT;AAAqBC,IAAAA,QAAQ,EAAE;AAA/B,GAA/B,EAAuEC,MAAvE,CAA8EL,MAA9E,CAAP;AACD,CAFM;AAIP,OAAO,MAAMM,2BAA2B,GAAGC,QAAQ,IAAI;AACrD,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMC,GAAX,IAAkBF,QAAlB,EAA4B;AAC1B,QAAI,CAACE,GAAG,CAACC,QAAJ,CAAa,OAAb,CAAL,EAA4B;AAC1BF,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcF,QAAQ,CAACE,GAAD,CAAtB;AACD;AACF;;AACD,SAAOD,MAAP;AACD,CARM;AAUP,OAAO,MAAMG,gBAAgB,GAAG,CAACJ,QAAD,EAAWK,SAAX,KAAyB;AACvD,QAAMJ,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMC,GAAX,IAAkBF,QAAlB,EAA4B;AAC1B,QAAIE,GAAG,CAACC,QAAJ,CAAa,OAAb,KAAyBH,QAAQ,CAACE,GAAD,CAArC,EAA4C;AAC1CG,MAAAA,SAAS,CAACrB,OAAV,CAAkBsB,IAAI,IAAI;AACxB,YAAIA,IAAI,CAACC,KAAL,KAAeL,GAAG,CAACM,OAAJ,CAAY,OAAZ,EAAqB,EAArB,CAAnB,EAA6C;AAC3CP,UAAAA,MAAM,CAACf,IAAP,CAAYoB,IAAI,CAAClB,KAAjB;AACD;AACF,OAJD;AAKD;AACF;;AACD,SAAOa,MAAP;AACD,CAZM","sourcesContent":["/**\n * This function will create data with supported format for react-select dropdown.\n * @param data - array of data\n * @param keys - e.g: ['id', 'name'] which can be used to create format for dropdown\n * @returns {[]}\n */\nexport const createDropdownData = (data = [], keys = []) => {\n  const createdArray = [];\n  if (data && data.length) {\n    data.forEach(item => {\n      createdArray.push({\n        value: item[keys[0]],\n        label: item[keys[1]],\n      });\n    });\n  }\n  return createdArray;\n};\n\n/**\n * This function will extract `value` from selected multiple dropdown. This will only used when Dropdown component has isMulti: true\n * @param values - selected values from dropdown\n * @returns {[]}\n */\nexport const fetchIdsFromSelectedDropdownValues = (values = []) => {\n  const extractedValue = [];\n  if (values && values.length) {\n    values.forEach(item => {\n      extractedValue.push(item.value);\n    });\n  }\n  return extractedValue;\n};\n\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(amount);\n};\n\nexport const removeErrorFieldsFromValues = formData => {\n  const fields = {};\n  for (const key in formData) {\n    if (!key.includes('Error')) {\n      fields[key] = formData[key];\n    }\n  }\n  return fields;\n};\n\nexport const fetchErrorFields = (formData, formModel) => {\n  const fields = [];\n  for (const key in formData) {\n    if (key.includes('Error') && formData[key]) {\n      formModel.forEach(form => {\n        if (form.field === key.replace('Error', '')) {\n          fields.push(form.label);\n        }\n      });\n    }\n  }\n  return fields;\n};\n"]},"metadata":{},"sourceType":"module"}